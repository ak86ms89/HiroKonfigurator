@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HiroKonfig.Services.IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div class="container-fluid h-100">
    <div class="splashscreen-content">
        <div class="row h-100 justify-content-center">
            <div class="col-10 col-lg-6 align-self-center">
                <div class="item">
                    <div class="row">
                    <div class="col-12">
                        <!--
                        <div class="alert alert-info">
                            Username: admin<br />
                            Password: admin
                        </div>
                        -->
                        <div class="card">
                            <h4 class="card-header">Hiro Konfigurator Log In</h4>
                            <div class="card-body">
                                <EditForm Model="@loginuser" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <div class="form-group">
                                        <label>Username</label>
                                        <InputText @bind-Value="loginuser.Username" class="form-control" />
                                        <ValidationMessage For="@(() => loginuser.Username)" />
                                    </div>
                                    <div class="form-group">
                                        <label>Password</label>
                                        <InputText @bind-Value="loginuser.Password" type="password" class="form-control" />
                                        <ValidationMessage For="@(() => loginuser.Password)" />
                                    </div>
                                    <button class="btn btn-block btn-coral">
                                        @if (loading)
                                        {
                                            <span class="spinner-border spinner-border-sm mr-1"></span>
                                        }
                                        Login
                                    </button>
                                    @if (!string.IsNullOrEmpty(error))
                                    {
                                        <div class="alert alert-danger mt-3 mb-0">@error</div>
                                    }
                                </EditForm>
                            </div>
                        </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>
</div>

<style>


    .splashscreen-content {
        height100 %;
        padding-top: 20Vh;
    }

    .splashscreen {
        background-color: #002241;
        position: fixed;
        left: 0;
        top: 0px;
        bottom: 0;
        right: 0;
        z-index: -1;
        padding: 0;
        color: #fff;
    }

    .butterfly {
        position: fixed;
        z-index: -1;
        left: 0;
        bottom: 0;
        width: 33%;
        height: 55vH;
        background-image: url(images/butterfly.png);
        background-position: top right;
        background-repeat: no-repeat;
    }

</style>
<div class="splashscreen">
    <div class="butterfly"></div>
</div>




@code {

    private LogInUser loginuser = new LogInUser();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(loginuser.Username, loginuser.Password);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    private class LogInUser
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public LogInUser()
        {

        }
    }
 
}